#pragma checksum "C:\Users\ins25k\Desktop\0611 (4) (2)\cSharpPro\cSharpPro\Views\Kiosk\Barcode.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9936c8922597ebda01819cd15b02f4e343d47147"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Kiosk_Barcode), @"mvc.1.0.view", @"/Views/Kiosk/Barcode.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Kiosk/Barcode.cshtml", typeof(AspNetCore.Views_Kiosk_Barcode))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ins25k\Desktop\0611 (4) (2)\cSharpPro\cSharpPro\Views\_ViewImports.cshtml"
using cSharpPro;

#line default
#line hidden
#line 2 "C:\Users\ins25k\Desktop\0611 (4) (2)\cSharpPro\cSharpPro\Views\_ViewImports.cshtml"
using cSharpPro.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9936c8922597ebda01819cd15b02f4e343d47147", @"/Views/Kiosk/Barcode.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0f49734941aa9055b6b4d8a305c95637b4de87b4", @"/Views/_ViewImports.cshtml")]
    public class Views_Kiosk_Barcode : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 8, true);
            WriteLiteral("<html>\r\n");
            EndContext();
            BeginContext(8, 16011, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c00b01c83e5f4b30af9679cc723ae339", async() => {
                BeginContext(14, 13006, true);
                WriteLiteral(@"
    <style>
        #barcodevideo, #barcodecanvas, #barcodecanvasg {
            height: 400px;
        }

        #barcodecanvasg {
            position: absolute;
            top: 0px;
            left: 0px;
        }

        #result {
            font-family: verdana;
            font-size: 1.5em;
        }

        #barcode {
            position: relative;
        }

        #barcodecanvas {
            display: none;
        }
    </style>
    <script src=""https://code.jquery.com/jquery-1.10.2.js""></script>
    <script type=""text/javascript"">

        var sound = new Audio(""barcode.wav"");

        $(document).ready(function () {

            barcode.config.start = 0.1;
            barcode.config.end = 0.9;
            barcode.config.video = '#barcodevideo';
            barcode.config.canvas = '#barcodecanvas';
            barcode.config.canvasg = '#barcodecanvasg';
            barcode.setHandler(function (barcode) {
                $('#result').html(barcode);
   ");
                WriteLiteral(@"         });
            barcode.init();

            $('#result').bind('DOMSubtreeModified', function (e) {
                sound.play();
            });

        });

        var barcode = function () {

            var localMediaStream = null;
            var bars = [];
            var handler = null;

            var dimensions = {
                height: 0,
                width: 0,
                start: 0,
                end: 0
            }

            var elements = {
                video: null,
                canvas: null,
                ctx: null,
                canvasg: null,
                ctxg: null
            }

            var upc = {
                '0': [3, 2, 1, 1],
                '1': [2, 2, 2, 1],
                '2': [2, 1, 2, 2],
                '3': [1, 4, 1, 1],
                '4': [1, 1, 3, 2],
                '5': [1, 2, 3, 1],
                '6': [1, 1, 1, 4],
                '7': [1, 3, 1, 2],
                '8': [1, 2, 1, 3],
  ");
                WriteLiteral(@"              '9': [3, 1, 1, 2]
            };

            var check = {
                'oooooo': '0',
                'ooeoee': '1',
                'ooeeoe': '2',
                'ooeeeo': '3',
                'oeooee': '4',
                'oeeooe': '5',
                'oeeeoo': '6',
                'oeoeoe': '7',
                'oeoeeo': '8',
                'oeeoeo': '9'
            }

            var config = {
                strokeColor: '#f00',
                start: 0.1,
                end: 0.9,
                threshold: 160,
                quality: 0.45,
                delay: 100,
                video: '',
                canvas: '',
                canvasg: ''
            }

            function init() {

                window.URL = window.URL || window.webkitURL;
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

                elements.video = docume");
                WriteLiteral(@"nt.querySelector(config.video);
                elements.canvas = document.querySelector(config.canvas);
                elements.ctx = elements.canvas.getContext('2d');
                elements.canvasg = document.querySelector(config.canvasg);
                elements.ctxg = elements.canvasg.getContext('2d');

                /*if (navigator.getUserMedia) {
                    navigator.getUserMedia({audio: false, video: true}, function(stream) {
                        elements.video.srcObject = stream;
                    }, function(error) {
                        console.log(error);
                    });
                }*/

                /*********teste na biblioteca do cara para abertura da camera*********/
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }

                // Some browsers partially implement mediaDevices. We can't just assign an object
                // with getUserMedia as it would ");
                WriteLiteral(@"overwrite existing properties.
                // Here, we will just add the getUserMedia property if it's missing.
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {

                        // First get ahold of the legacy getUserMedia, if present
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

                        // Some browsers just don't implement it - return a rejected promise with an error
                        // to keep a consistent interface
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }

                        // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise
                        return new Promise(function (resolve, reject) {
                           ");
                WriteLiteral(@" getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }

                navigator.mediaDevices.getUserMedia({ audio: false, video: true })
                    .then(function (stream) {
                        var video = document.querySelector('video');
                        // Older browsers may not have srcObject
                        if (""srcObject"" in video) {
                            video.srcObject = stream;
                        } else {
                            // Avoid using this in new browsers, as it is going away.
                            video.src = window.URL.createObjectURL(stream);
                        }

                    })
                    .catch(function (err) {
                        console.log(err.name + "": "" + err.message);
                    });
                /****fim do teste*****/

                elements.video.addEventListener('canplay', function (e) {

    ");
                WriteLiteral(@"                dimensions.height = elements.video.videoHeight;
                    dimensions.width = elements.video.videoWidth;

                    dimensions.start = dimensions.width * config.start;
                    dimensions.end = dimensions.width * config.end;

                    elements.canvas.width = dimensions.width;
                    elements.canvas.height = dimensions.height;
                    elements.canvasg.width = dimensions.width;
                    elements.canvasg.height = dimensions.height;

                    drawGraphics();
                    setInterval(function () { snapshot() }, config.delay);

                }, false);
            }

            function snapshot() {
                elements.ctx.drawImage(elements.video, 0, 0, dimensions.width, dimensions.height);
                processImage();
            }

            function processImage() {

                bars = [];

                var pixels = [];
                var binary = [];
  ");
                WriteLiteral(@"              var pixelBars = [];

                // convert to grayscale

                var imgd = elements.ctx.getImageData(dimensions.start, dimensions.height * 0.5, dimensions.end - dimensions.start, 1);
                var rgbpixels = imgd.data;

                for (var i = 0, ii = rgbpixels.length; i < ii; i = i + 4) {
                    pixels.push(Math.round(rgbpixels[i] * 0.2126 + rgbpixels[i + 1] * 0.7152 + rgbpixels[i + 2] * 0.0722));
                }

                // normalize and convert to binary

                var min = Math.min.apply(null, pixels);
                var max = Math.max.apply(null, pixels);

                for (var i = 0, ii = pixels.length; i < ii; i++) {
                    if (Math.round((pixels[i] - min) / (max - min) * 255) > config.threshold) {
                        binary.push(1);
                    } else {
                        binary.push(0);
                    }
                }

                // determine bar widths

     ");
                WriteLiteral(@"           var current = binary[0];
                var count = 0;

                for (var i = 0, ii = binary.length; i < ii; i++) {
                    if (binary[i] == current) {
                        count++;
                    } else {
                        pixelBars.push(count);
                        count = 1;
                        current = binary[i]
                    }
                }
                pixelBars.push(count);

                // quality check

                if (pixelBars.length < (3 + 24 + 5 + 24 + 3 + 1)) {
                    return;
                }

                // find starting sequence

                var startIndex = 0;
                var minFactor = 0.5;
                var maxFactor = 1.5;

                for (var i = 3, ii = pixelBars.length; i < ii; i++) {
                    var refLength = (pixelBars[i] + pixelBars[i - 1] + pixelBars[i - 2]) / 3;
                    if (
                        (pixelBars[i] > (minFactor *");
                WriteLiteral(@" refLength) || pixelBars[i] < (maxFactor * refLength))
                        && (pixelBars[i - 1] > (minFactor * refLength) || pixelBars[i - 1] < (maxFactor * refLength))
                        && (pixelBars[i - 2] > (minFactor * refLength) || pixelBars[i - 2] < (maxFactor * refLength))
                        && (pixelBars[i - 3] > 3 * refLength)
                    ) {
                        startIndex = i - 2;
                        break;
                    }
                }

                console.log(""startIndex: "" + startIndex);

                // return if no starting sequence found

                if (startIndex == 0) {
                    return;
                }

                // discard leading and trailing patterns

                pixelBars = pixelBars.slice(startIndex, startIndex + 3 + 24 + 5 + 24 + 3);

                console.log(""pixelBars: "" + pixelBars);

                // calculate relative widths

                var ref = (pixelBars[0] + pixelBar");
                WriteLiteral(@"s[1] + pixelBars[2]) / 3;

                for (var i = 0, ii = pixelBars.length; i < ii; i++) {
                    bars.push(Math.round(pixelBars[i] / ref * 100) / 100);
                }

                // analyze pattern

                analyze();

            }

            function analyze() {

                console.clear();

                console.log(""analyzing"");

                // determine parity first digit and reverse sequence if necessary

                var first = normalize(bars.slice(3, 3 + 4), 7);
                if (!isOdd(Math.round(first[1] + first[3]))) {
                    bars = bars.reverse();
                }

                // split into digits

                var digits = [
                    normalize(bars.slice(3, 3 + 4), 7),
                    normalize(bars.slice(7, 7 + 4), 7),
                    normalize(bars.slice(11, 11 + 4), 7),
                    normalize(bars.slice(15, 15 + 4), 7),
                    normalize(bars.slice(1");
                WriteLiteral(@"9, 19 + 4), 7),
                    normalize(bars.slice(23, 23 + 4), 7),
                    normalize(bars.slice(32, 32 + 4), 7),
                    normalize(bars.slice(36, 36 + 4), 7),
                    normalize(bars.slice(40, 40 + 4), 7),
                    normalize(bars.slice(44, 44 + 4), 7),
                    normalize(bars.slice(48, 48 + 4), 7),
                    normalize(bars.slice(52, 52 + 4), 7)
                ]

                console.log(""digits: "" + digits);

                // determine parity and reverse if necessary

                var parities = [];

                for (var i = 0; i < 6; i++) {
                    if (parity(digits[i])) {
                        parities.push('o');
                    } else {
                        parities.push('e');
                        digits[i] = digits[i].reverse();
                    }
                }

                // identify digits

                var result = [];
                var quality = 0;");
                WriteLiteral(@"

                for (var i = 0, ii = digits.length; i < ii; i++) {

                    var distance = 9;
                    var bestKey = '';

                    for (key in upc) {
                        if (maxDistance(digits[i], upc[key]) < distance) {
                            distance = maxDistance(digits[i], upc[key]);
                            bestKey = key;
                        }
                    }

                    result.push(bestKey);
                    if (distance > quality) {
                        quality = distance;
                    }

                }

                if (result == '8,0,2,0,1,5,7,2,6,0,0,3')
                    window.location = '");
                EndContext();
                BeginContext(13021, 44, false);
#line 365 "C:\Users\ins25k\Desktop\0611 (4) (2)\cSharpPro\cSharpPro\Views\Kiosk\Barcode.cshtml"
                                  Write(Url.Action("Menu_Hambuger_bulgogi", "Kiosk"));

#line default
#line hidden
                EndContext();
                BeginContext(13065, 106, true);
                WriteLiteral("\';\r\n                else if (result == \'8,0,2,0,1,4,7,2,6,0,4,2\')\r\n                    window.location = \'");
                EndContext();
                BeginContext(13172, 34, false);
#line 367 "C:\Users\ins25k\Desktop\0611 (4) (2)\cSharpPro\cSharpPro\Views\Kiosk\Barcode.cshtml"
                                  Write(Url.Action("Wait_Number", "Kiosk"));

#line default
#line hidden
                EndContext();
                BeginContext(13206, 2806, true);
                WriteLiteral(@"';
                console.log(""result: "" + result);

                // check digit

                var checkDigit = check[parities.join('')];

                // output

                console.log(""quality: "" + quality);

                if (quality < config.quality) {
                    if (handler != null) {
                        handler(checkDigit + result.join(''));
                    }
                }

            }

            function setHandler(h) {
                handler = h;
            }

            function normalize(input, total) {
                var sum = 0;
                var result = [];
                for (var i = 0, ii = input.length; i < ii; i++) {
                    sum = sum + input[i];
                }
                for (var i = 0, ii = input.length; i < ii; i++) {
                    result.push(input[i] / sum * total);
                }
                return result;
            }

            function isOdd(num) {
               ");
                WriteLiteral(@" return num % 2;
            }

            function maxDistance(a, b) {
                var distance = 0;
                for (var i = 0, ii = a.length; i < ii; i++) {
                    if (Math.abs(a[i] - b[i]) > distance) {
                        distance = Math.abs(a[i] - b[i]);
                    }
                }
                return distance;
            }

            function parity(digit) {
                return isOdd(Math.round(digit[1] + digit[3]));
            }

            function drawGraphics() {
                elements.ctxg.strokeStyle = config.strokeColor;
                elements.ctxg.lineWidth = 3;
                elements.ctxg.beginPath();
                elements.ctxg.moveTo(dimensions.start, dimensions.height * 0.5);
                elements.ctxg.lineTo(dimensions.end, dimensions.height * 0.5);
                elements.ctxg.stroke();
            }

            return {
                init: init,
                setHandler: setHandler,
           ");
                WriteLiteral(@"     config: config
            };

            // debugging utilities

            function drawBars(binary) {
                for (var i = 0, ii = binary.length; i < ii; i++) {
                    if (binary[i] == 1) {
                        elements.ctxg.strokeStyle = '#fff';
                    } else {
                        elements.ctxg.strokeStyle = '#000';
                    }
                    elements.ctxg.lineWidth = 3;
                    elements.ctxg.beginPath();
                    elements.ctxg.moveTo(start + i, height * 0.5);
                    elements.ctxg.lineTo(start + i + 1, height * 0.5);
                    elements.ctxg.stroke();
                }
            }

        }();


    </script>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(16019, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(16021, 225, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "deb3768604bf4e89878d3a832aaa81b7", async() => {
                BeginContext(16027, 212, true);
                WriteLiteral("\r\n\r\n    <div id=\"barcode\">\r\n        <video id=\"barcodevideo\" autoplay></video>\r\n        <canvas id=\"barcodecanvasg\"></canvas>\r\n    </div>\r\n    <canvas id=\"barcodecanvas\"></canvas>\r\n    <div id=\"result\"></div>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(16246, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
